{"name":"Docker9","tagline":"docker monitor","body":" `利用docker的docker.sock进行docker的监控：`\r\n\r\n　# 功能：       \r\n        该功能就是当有新的docker容器启动或是死掉的时候，会进行相应容器信息的打印．    \r\n　# 基本原理：    \r\n　　　　利用docker client 与docker dasmon的通信机制进行检测．当有新容器启动的时  \r\n　　　　候此时会与docker　daemon进行通信．   \r\n\r\n\r\n```c\r\n  2 package main\r\n  3 \r\n  4 import (\r\n  5         \"github.com/fsouza/go-dockerclient\"\r\n  6         \"log\"\r\n  7         \"time\"\r\n  8 )\r\n  9 \r\n 10 func assert(err error, context string) {\r\n 11         if err != nil {\r\n 12                 log.Fatal(context+\": \", err)\r\n 13         }\r\n 14 }\r\n 15 \r\n 16 func main() {\r\n 17         client, err := docker.NewClient(\"unix:///var/run/docker.sock\")\r\n 18         assert(err, \"docker\")\r\n 19         events := make(chan *docker.APIEvents)\r\n 20         assert(client.AddEventListener(events), \"attacher\")\r\n 21         log.Println(\"listening for events\")\r\n 22         for ; true ; {\r\n 23             for msg := range events {\r\n 24                 log.Println(\"event:\", msg.ID[:12], msg.Status)\r\n 25             }   \r\n 26             time.Sleep(1 * time.Second)\r\n 27         }\r\n 28 }\r\n```\r\n\r\n\r\n\r\n欢迎一起交流学习 \r\n====\r\n \r\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\r\n\r\n* 邮件(1031379296#qq.com, 把#换成@)\r\n* QQ: 1031379296\r\n* weibo: [@王发康](http://weibo.com/u/2786211992/home)\r\n\r\n\r\nThx\r\n====\r\n\r\n* chunshengsterATgmail.com\r\n\r\n\r\nAuthor\r\n====\r\n* Linux\\nginx\\golang\\c\\c++爱好者\r\n* 欢迎一起交流  一起学习# \r\n* Others say good and Others good\r\n\r\n\r\n","google":"docker monitor","note":"Don't delete this file! It's used internally to help with page regeneration."}